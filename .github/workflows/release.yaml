name: Release build

on:
  push:
    branches:
      - disabled
    tags:
      - 0*

jobs:

  get-tag:
    runs-on: ubuntu-latest

    steps:
      - name: Get tag
        id: get_tag
        run: |
          TAG_REF=${{ github.ref }}
          TAG_REF=`echo $TAG_REF | cut -c11-`
          echo ::set-env name=TAG_REF::$TAG_REF

      - name: Echo tag
        run: echo $TAG_REF


  dockerfile-lint:
    needs: get-tag

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
      fail-fast: false

    container:
      image: hadolint/hadolint:latest-debian

    steps:

      - name: Echo tag
        run: echo $TAG_REF

      - name: Checkout
        uses: actions/checkout@v2

      - name: Linting
        run: |
          hadolint generic/Dockerfile
          hadolint generic/Dockerfile.legacy.catkin
          hadolint generic/Dockerfile.legacy.colcon
          hadolint generic/Dockerfile.base
          hadolint generic/Dockerfile.cuda.kinetic
          hadolint generic/Dockerfile.cuda.melodic
          hadolint crossbuild/Dockerfile.kinetic-crossbuild
          hadolint crossbuild/Dockerfile.kinetic-crossbuild-driveworks
          hadolint crossbuild/Dockerfile.melodic-crossbuild
          hadolint crossbuild/Dockerfile.melodic-crossbuild-driveworks

  build-base:
    needs: dockerfile-lint

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, self-hosted]
      fail-fast: false
    env:
      IMAGE_NAME: autoware_github_actions
      ROS_DISTRO: melodic
      TAG_PREFIX: bleedingedge
      VERSION: master

    steps:

      - name: Checkout
        uses: actions/checkout@v2

      - name: Image build
        run: |
          docker login -u ${{ secrets.DKR_USR }} -p ${{ secrets.DKR_PASS }}
          cd generic
          ./build.sh -b -c off -i ${{ secrets.DKR_USR }}/$IMAGE_NAME -r $ROS_DISTRO -t $TAG_PREFIX -v $VERSION

      - name: amd64 image re-tag and push
        if: contains(matrix.os, 'ubuntu-latest')
        run: |
          docker tag ${{ secrets.DKR_USR }}/$IMAGE_NAME:$TAG_PREFIX-$ROS_DISTRO-base ${{ secrets.DKR_USR }}/$IMAGE_NAME:$TAG_PREFIX-$ROS_DISTRO-base-amd64
          docker push ${{ secrets.DKR_USR }}/$IMAGE_NAME:$TAG_PREFIX-$ROS_DISTRO-base-amd64

      - name: arm64v8 image re-tag and push
        if: contains(matrix.os, 'self-hosted')
        run: |
          docker tag ${{ secrets.DKR_USR }}/$IMAGE_NAME:$TAG_PREFIX-$ROS_DISTRO-base ${{ secrets.DKR_USR }}/$IMAGE_NAME:$TAG_PREFIX-$ROS_DISTRO-base-arm64v8
          docker push ${{ secrets.DKR_USR }}/$IMAGE_NAME:$TAG_PREFIX-$ROS_DISTRO-base-arm64v8

  build-base-cuda:
    needs: dockerfile-lint

    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: autoware_github_actions
      ROS_DISTRO: melodic
      TAG_PREFIX: bleedingedge
      VERSION: master

    steps:

      - name: Checkout${{ secrets.DKR_USR }}/$IMAGE_NAME:$TAG_PREFIX-$ROS_DISTRO-base-aarch64
        uses: actions/checkout@v2

      - name: Image build and push
        run: |
          docker login -u ${{ secrets.DKR_USR }} -p ${{ secrets.DKR_PASS }}
          cd generic
          ./build.sh -b -i ${{ secrets.DKR_USR }}/$IMAGE_NAME -r $ROS_DISTRO -t $TAG_PREFIX -v $VERSION
          docker push ${{ secrets.DKR_USR }}/$IMAGE_NAME:$TAG_PREFIX-$ROS_DISTRO-base-cuda

  build-aarch64-cross:
    needs: dockerfile-lint

    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: autoware_github_actions
      DOCKER_ARCH: arm64v8
      TARGET_ARCH: aarch64
      TARGET_PLATFORM: generic-aarch64
      ROS_DISTRO: melodic
      TAG_SUFFIX: bleedingedge
      VERSION: master

    steps:

      - name: Checkout
        uses: actions/checkout@v2

      - name: Image build and push
        run: |
          docker login -u ${{ secrets.DKR_USR }} -p ${{ secrets.DKR_PASS }}
          cd crossbuild
          ./build_cross_image.sh -p $TARGET_PLATFORM -r $ROS_DISTRO -t $TAG_SUFFIX
          docker tag autoware/build:$TARGET_PLATFORM-$ROS_DISTRO-$TAG_SUFFIX ${{ secrets.DKR_USR }}/$IMAGE_NAME:$TARGET_PLATFORM-$ROS_DISTRO-$TAG_SUFFIX
          docker push ${{ secrets.DKR_USR }}/$IMAGE_NAME:$TARGET_PLATFORM-$ROS_DISTRO-$TAG_SUFFIX


  amd64-arm64v8-bundle:
    needs: build-base

    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: autoware_github_actions
      ROS_DISTRO: melodic
      TAG_PREFIX: bleedingedge
      VERSION: master

    steps:

      - name: Image build and push
        run: |
          docker login -u ${{ secrets.DKR_USR }} -p ${{ secrets.DKR_PASS }}
          export DOCKER_CLI_EXPERIMENTAL=enabled
          docker pull ${{ secrets.DKR_USR }}/$IMAGE_NAME:$TAG_PREFIX-$ROS_DISTRO-base-arm64v8
          docker pull ${{ secrets.DKR_USR }}/$IMAGE_NAME:$TAG_PREFIX-$ROS_DISTRO-base-amd64
          docker manifest create ${{ secrets.DKR_USR }}/$IMAGE_NAME:$TAG_PREFIX-$ROS_DISTRO-base --amend ${{ secrets.DKR_USR }}/$IMAGE_NAME:$TAG_PREFIX-$ROS_DISTRO-base-amd64 --amend ${{ secrets.DKR_USR }}/$IMAGE_NAME:$TAG_PREFIX-$ROS_DISTRO-base-arm64v8
          docker manifest push ${{ secrets.DKR_USR }}/$IMAGE_NAME:$TAG_PREFIX-$ROS_DISTRO-base
